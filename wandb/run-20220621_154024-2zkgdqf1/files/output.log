
 31%|█████████████████████▌                                                | 924/3000 [00:01<00:03, 647.95it/s]


100%|█████████████████████████████████████████████████████████████████████| 3000/3000 [00:04<00:00, 717.00it/s]
/home/alfin/Documents/deep_learning/monocular_fish_3d_box/lib/Dataset_utils.py:36: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  df = df.append(d,ignore_index=True)
Epoch 0 | 0/67: Loss 1.0727895498275757, Dim Loss 0.01384213101118803, Orient Loss 0.6852570176124573, Depth Loss 0.37922728061676025
/home/alfin/.conda/envs/CenterNet/lib/python3.8/site-packages/torch/nn/modules/loss.py:907: UserWarning: Using a target size (torch.Size([64])) that is different to the input size (torch.Size([64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  return F.smooth_l1_loss(input, target, reduction=self.reduction, beta=self.beta)
Epoch 0 | 60/67: Loss 0.0719994604587555, Dim Loss 0.011336928233504295, Orient Loss 0.027106940746307373, Depth Loss 0.038090359419584274
/home/alfin/.conda/envs/CenterNet/lib/python3.8/site-packages/torch/nn/modules/loss.py:907: UserWarning: Using a target size (torch.Size([28])) that is different to the input size (torch.Size([28, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  return F.smooth_l1_loss(input, target, reduction=self.reduction, beta=self.beta)
====================
Done with epoch 0!
Saving weights as weights/epoch_0.pkl ...
====================
Epoch 1 | 0/67: Loss 0.08939056098461151, Dim Loss 0.012483041733503342, Orient Loss 0.04087346792221069, Depth Loss 0.041027262806892395
Epoch 1 | 60/67: Loss -0.04336884245276451, Dim Loss 0.011120596900582314, Orient Loss -0.09406965970993042, Depth Loss 0.04402845725417137
====================
Done with epoch 1!
Saving weights as weights/epoch_1.pkl ...
====================
Epoch 2 | 0/67: Loss 0.0855419859290123, Dim Loss 0.011139042675495148, Orient Loss 0.029100477695465088, Depth Loss 0.04975808411836624
Epoch 2 | 60/67: Loss -0.1735672503709793, Dim Loss 0.010612837970256805, Orient Loss -0.2138993740081787, Depth Loss 0.03396442532539368
====================
Done with epoch 2!
Saving weights as weights/epoch_2.pkl ...
====================
Epoch 3 | 0/67: Loss -0.2159176766872406, Dim Loss 0.01016400009393692, Orient Loss -0.2647634744644165, Depth Loss 0.042747415602207184
Epoch 3 | 60/67: Loss -0.49827003479003906, Dim Loss 0.009574532508850098, Orient Loss -0.5426869988441467, Depth Loss 0.03867226839065552
====================
Done with epoch 3!
Saving weights as weights/epoch_3.pkl ...
====================
Epoch 4 | 0/67: Loss -0.4819464385509491, Dim Loss 0.009478142485022545, Orient Loss -0.536870002746582, Depth Loss 0.04923669248819351
Epoch 4 | 60/67: Loss -0.47279980778694153, Dim Loss 0.008465810678899288, Orient Loss -0.5051581263542175, Depth Loss 0.027278823778033257
====================
Done with epoch 4!
Saving weights as weights/epoch_4.pkl ...
====================
Epoch 5 | 0/67: Loss -0.6347047686576843, Dim Loss 0.008764149621129036, Orient Loss -0.6828218102455139, Depth Loss 0.0428585521876812
Traceback (most recent call last):
  File "train.py", line 89, in <module>
    orient_loss = orient_loss_func(orient, truth_orient, truth_conf)
  File "/home/alfin/Documents/deep_learning/monocular_fish_3d_box/lib/Model.py", line 14, in OrientationLoss
    orientGT_batch = orientGT_batch[torch.arange(batch_size), indexes]
KeyboardInterrupt